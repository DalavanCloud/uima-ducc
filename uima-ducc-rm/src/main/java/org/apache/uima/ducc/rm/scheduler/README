Some of the files here are used to implement the DUCC model for developing and
debugging the scheduler.

------------------------------------------------------------------------
These are the scheduler codes:

   IScheduler - interface defining the code that makes the tough decisions. The intent
                is to be able to implement different schedulers that just plug in to
                IScheduleMain.

   IScheduleMain - interface defining the scheduling "daemon" that interfaces
                   between the world and IScheduler.

   Scheduler - implementation of IScheduleMain

   SimpleFairShare - implementation of IScheduler providing a simple fair-share
                     with single prioiry scheduler.

   Share - repressents one share.  The IScheduleMain will look at the resources
           and create Shares from them.

   Job - represents one job.

   Machine - represents one machine.

   WorkItem - represents one work item. (Probably not needed for pure scheduling
              purposes, essential for modeling).

   SchedulingException - grab-all for anything that goes wrong in the scheduling code.
                         Presents a RuntimeException (no crash)

   User - represents one user

------------------------------------------------------------------------
These are purely for simulation.  I may refactor JobManager through an interface so I can
    have the modeled JobManager and the "real" one, transparently.  There's not much code but
    there's a bit of tricky threading and timer management here.

    JobManager - scheduler interacts with this for ALL job actions, and only JobManager gets
                 to interact with scheduler.  Simulates / models the real Job Manager.

    JobHandler - Models the UIMA/AS client for a job - feeds questions to the Agents and
                 fields returned state messages.  Interacts with JobManager and Agent.

    Agent      - Models the node agent - dispatches questions.

    ExecutionTask - this is a simple TimerTask that simulates execution of a task by just
                    sleeping for an appropriate amount of time.

------------------------------------------------------------------------
Other utility codes:
   Main - what you'd expect from main - starts things running and waits for it to die.
          It also supports a trivial command line through stdin that simulates the
          DUCC / Blade CLI.

   Logger - simple logger that sort of looks like Log4J until we decide on something else.
    
