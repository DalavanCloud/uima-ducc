#!/usr/bin/env python
# -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------

#
# This is the main DUCC system test driver.  Parameters allow various
# rates of error injection (both during analytic initialization and
# execution) , selection of execution styles (AE, DD, SE- service
# based), initialization times.  See the usage() method below for details.
#
# This script assumes a job directory has been prepared by the "prepare"
# script in this directory.
#

import os
import sys
import getopt
import string
import time
import subprocess
import shutil
import signal
from threading import *
import Queue

if ( not os.environ.has_key('DUCC_HOME') ):    
    os.environ['DUCC_HOME'] = os.path.abspath('../..')
    DUCC_HOME=os.environ['DUCC_HOME']
    print 'Environment variable DUCC_HOME is missing, using default.'
else:
    DUCC_HOME = os.environ['DUCC_HOME']

print 'Using', os.environ['DUCC_HOME']
sys.path.append(DUCC_HOME + '/admin')

from ducc_util import DuccUtil
from ducc_util import DuccProperties
from ducc      import Ducc

class DuccProcess(Thread):
    def __init__(self, runner, jobfile):
        Thread.__init__(self)
        self.runner = runner
        self.jobfile = jobfile

    # 
    # read file and get nthreads, memory, class
    #
    def read_jobfile(self):
        print 'Reading jobfile', self.jobfile
        f = open(self.jobfile);
        threads = '1'
        memory = '15'
        clz = 'urgent'
        machines = None
        services = None
        
        for line in f:
            toks = line.strip().split('=');
            if ( toks[0].strip() == 'threads' ):
                threads = toks[1]
            elif (toks[0].strip() == 'class'):
                clz = toks[1]
            elif (toks[0].strip() == 'memory'):
                if ( self.runner.memory_override == None ):
                    memory = toks[1]
                else:
                    memory = self.runner.memory_override
            elif (toks[0].strip() == 'user'):
                user = toks[1]
            elif (toks[0].strip() == 'machines'):
                machines = toks[1]
            elif (toks[0].strip() == 'services'):
                services = toks[1].strip()

        answer = {}
        answer['threads'] = threads
        answer['memory'] = memory
        answer['class'] = clz
        answer['user'] = user
        answer['machines'] = machines
        answer['services'] = services
        return answer

    def execute(self):
        os.environ['USER'] = self.user
        print 'Running', self.jobfile, 'as', os.environ['USER'], 'compression', self.runner.compression
        print self.cmd
        os.system(self.cmd)

    def run(self):
        os.environ['USER'] = self.user

        print "Running as", os.environ['USER']
        print self.cmd

        ducc = subprocess.Popen(self.cmd, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        p = ducc.stdout
        realid = None
        while 1:
            line = p.readline().strip()
            print line
            if ( line.endswith('submitted') ) :
                toks = line.split()
                realid = toks[1]
                            
            if ( not line ):
                ducc.wait()
                break

        if ( realid == None ):
            print 'Cannot verify job, no id'
            return

        #CMD = "./verify.py -j " + realid
        #ducc = subprocess.Popen(CMD, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        #p = ducc.stdout
        #while 1:
        #    line = p.readline().strip()
        #    if ( not line ):
        #        ducc.wait()
        #        return                 
        #    print 'VERIFY ' + realid + ':', line

        if ( self.runner.watch ):
            self.runner.queue.get()            # remove marker so main() can eventually exit
            self.runner.queue.task_done()

    def calculate_bloat(self, memory):
        # if we're testing our ability to contan bloat, we'll set xmx to double the
        # requested memory.  the JP will start to allocate stuff in an infinite loop.
        # the agents are expected to catch this and kill the process before the 
        # machine dies.
        #
        # sure hope that works!
        if ( (self.runner.init_bloat != None) or (self.runner.process_bloat != None) ):
            xmx = '-Xmx' + str(int(memory)*2) + 'G'
            if ( self.runner.init_bloat != None ):
                envparms = ' INIT_BLOAT=' + self.runner.init_bloat
            else:
                envparms = ' PROCESS_BLOAT=' + self.runner.process_bloat
        else:
            xmx = '-Xmx100M'
            envparms = ''

        return (xmx, envparms)

    def mkargs(self, arglist):
        return '"' + ' '.join(arglist) + '"'

    def submit(self):

        print 'SUBMIT', self.jobfile
        args = None

        DUCC_HOME = os.environ['DUCC_HOME']
        HERE = os.getcwd();    

        #cr     = DUCC_HOME + '/test/jobs/FixedSleepCR.xml'
        cr     = 'org.apache.uima.ducc.test.randomsleep.FixedSleepCR'

        parms    = self.read_jobfile()
        nthreads = parms['threads']
        memory   = parms['memory']
        pclass   = parms['class']
        user     = parms['user']
        machines = parms['machines']
        services = parms['services']
        (process_xmx, bloat_parms) = self.calculate_bloat(memory)
        driver_args = []
        process_args = []

        if ( self.runner.style == 'AE' ):
            ae = 'org.apache.uima.ducc.test.randomsleep.FixedSleepAE'
        elif ( self.runner.style == 'DD' ):
            #dd = DUCC_HOME + '/test/jobs/DDSleepDescriptor.xml'
            dd = 'org.apache.uima.ducc.test.ddjob.DDSleepDescriptor'
        else:
            # style = 'SE'
            ae = 'UimaAsFailAgg_' + services
            #working_dir = DUCC_HOME + '/test/jobs'

        if ( self.runner.use_sourcetree ):
            path = os.path.abspath('../../..')
            jvm_classpath = path + '/ducc_test/bin'
        else:
            jvm_classpath = DUCC_HOME + '/examples/lib/uima-ducc-examples.jar'

        if ( self.runner.style == 'SE' ):
            jvm_classpath = jvm_classpath + ':' + DUCC_HOME + '/examples/simple/resources'
        
        plain_broker_url = self.runner.broker_protocol + '://' + self.runner.broker_host + ':' + self.runner.broker_port
        cr_parms         = 'jobfile:' + self.jobfile + ',compression:' + self.runner.compression + ',error_rate:' + str(self.runner.error_rate)
        process_args.append(process_xmx)
        process_args.append('-DdefaultBrokerURL=' + plain_broker_url )

        driver_args.append('-Xmx500M')
        if ( self.runner.jd_uima_log != None ):
            driver_args.append(' -Djava.util.logging.config.file=' + self.runner.jd_uima_log)

        if ( self.runner.jp_uima_log != None ):
            driver_args.append(' -Djava.util.logging.config.file=' + self.runner.jp_uima_log)

        description      = '"' + self.jobfile + '"'

        jvm_driver_args = self.mkargs(driver_args)
        jvm_process_args = self.mkargs(process_args)

        print 'jvm_driver_args', jvm_driver_args
        print 'jvm_process_args', jvm_process_args

        CMD = 'java'
        if ( self.runner.use_jar) :
            CMD = CMD + ' -jar'
            CMD = CMD + ' ' + DUCC_HOME + '/lib/uima-ducc-submit.jar'
        else:
            CMD = CMD + ' ' + self.runner.submit_package + '.cli.DuccJobSubmit'

        CMD = CMD + ' --description '                         + description + '[' + self.runner.style + ']'
        CMD = CMD + ' --driver_descriptor_CR '                + cr
        CMD = CMD + ' --driver_descriptor_CR_overrides '      + cr_parms
        CMD = CMD + ' --driver_jvm_args '                     + jvm_driver_args
        CMD = CMD + ' --driver_classpath '                    + jvm_classpath
        CMD = CMD + ' --driver_environment '                  + 'LD_LIBRARY_PATH=/a/other/bogus/path'
        # CMD = CMD + ' --driver_exception_handler '            + 'org.apache.uima.ducc.test.handler.TimeoutHandler'
        
        if ( self.runner.style == 'DD' ):
            CMD = CMD + ' --process_DD '                      + dd
        else:     # ae and se
            CMD = CMD + ' --process_descriptor_AE '           + ae


        if ( self.runner.style == 'SE' ):
            CMD = CMD + ' --service_dependency UIMA-AS:FixedSleepAE_'+ services + ':' + plain_broker_url
            #CMD = CMD + ' --working_directory '               + working_dir

        CMD = CMD + ' --process_memory_size '                 + memory
        CMD = CMD + ' --process_classpath '                   + jvm_classpath
        
        CMD = CMD + ' --process_jvm_args '                    + jvm_process_args
        CMD = CMD + ' --process_thread_count '                + nthreads
        CMD = CMD + ' --scheduling_class '                    + pclass
        
        CMD = CMD + ' --process_per_item_time_max '           + self.runner.process_timeout  # in minutes
        CMD = CMD + ' --process_initialization_failures_cap ' + self.runner.init_fail_cap 
        
        CMD = CMD + ' --process_environment ' \
                  + '"' \
                  + ' AE_INIT_TIME='  + str(self.runner.init_time) \
                  + ' AE_INIT_RANGE=' + str(self.runner.init_range) \
                  + ' INIT_ERROR='    + str(self.runner.init_error) \
                  +  bloat_parms \
                  + ' LD_LIBRARY_PATH=/a/bogus/path' \
                  + '"'

        if ( machines != None ):
            CMD = CMD + ' --process_deployments_max '  + machines

        if ( self.runner.watch ):
            CMD = CMD + ' --wait_for_completion true'     

        self.user = user
        self.cmd = CMD

class ServiceThread(Thread):

    def __init__(self, cmd):
        Thread.__init__(self)
        self.cmd = cmd
        self.terminated = False

    def stop_service(self):
        self.terminated = True
        #os.system('kill -2 ' + str(self.svc.pid))
        self.svc.send_signal(2)

    def run(self):
        print 'Starting service:', self.cmd
        self.svc = subprocess.Popen(self.cmd, bufsize=0, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
        p = self.svc.stdout
        while 1:
            line = p.readline().strip()
            if ( (not line) or ( line == '') ):
                if ( self.terminated ):
                    return

            print 'VERIFY :' + line + ':'


class ServiceStarter(DuccUtil):

    def start_uima_as_service(self, instance):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be

        service_cp = os.environ['CLASSPATH'] + ':' + self.DUCC_HOME + '/examples/lib/uima-ducc-examples.jar'
        service_cp = service_cp              + ':' + self.DUCC_HOME + '/lib/uima/*'
        #self.format_cp(service_cp)

	print 'broker:', self.broker_url

        CMD = ['java']
        CMD.append("-DSERVICE_ID=" + instance)
        CMD.append("-DdefaultBrokerURL='" + self.broker_url + "'")
        CMD.append('-DJAVA_HOME=/share/jdk1.6')
        CMD.append('-classpath ' + service_cp)
        CMD.append('org.apache.uima.ducc.test.service.UIMA_Service')
        CMD.append('-saxonURL file:' + self.DUCC_HOME + '/lib/saxon/saxon8.jar')
        CMD.append('-xslt ' + self.DUCC_HOME + '/resources/dd2spring.xsl')
        CMD.append('-dd ' + self.DUCC_HOME + '/examples/simple/resources/Service_FixedSleep_' + instance + '.xml')
        #CMD.append('-b')
        os.environ['AE_INIT_TIME'] = '5'
        os.environ['AE_INIT_RANGE'] = '5'

        devnw = open(os.devnull, 'w')
        devnr = open(os.devnull, 'r')
        service = subprocess.Popen(' '.join(CMD), stdin=devnr, stdout=devnw, stderr=devnw,  shell=True)
        #print ' '.join(CMD)
        #service = self.spawn(' '.join(CMD));
        devnr.close()
        devnw.close()

        #p = service.stdout
        #while 1:
        #    line = p.readline().strip()
        #    if ( not line ):
        #        if ( self.terminated):
        #            return#

        #    print line

        print '------------------------- UIMA_AS Service Pid', service.pid
        return service

    def gen_service(self, svcid):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be

        plain_broker_url = self.broker_protocol + '://' + self.broker_host + ':' + self.broker_port

        props = DuccProperties()
        props.put('description', 'Test Service ' + svcid)
        props.put('process_DD', self.DUCC_HOME + '/examples/simple/resources/Service_FixedSleep_' + svcid + '.xml')
        props.put('process_memory_size', '15')
        props.put('process_classpath', 
                  self.DUCC_HOME + '/examples/lib/uima-ducc-examples.jar:' + 
                  self.DUCC_HOME + '/examples/simple/resources')
        props.put('process_jvm_args', '-Xmx100M -DdefaultBrokerURL=' + plain_broker_url)
        props.put('process_environment', 'AE_INIT_TIME=5000 AE_INIT_RANGE=1000 INIT_ERROR=0 LD_LIBRARY_PATH=/yet/a/nother/dumb/path')
        # props.put('process_deployments_max', 1)
        props.put('scheduling_class', 'fixed')
        #props.put('working_directory', '/home/challngr/projects/ducc/ducc_test/services')
        props.put('working_directory', os.getcwd())
        #props.put('working_directory', DUCC_HOME + '/test/jobs')

        svcfile = svcid + '.gen.svc'
        props.write(svcfile)
        return svcfile

    def submit_service(self, svcid):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be

        svcfile = self.gen_service(svcid)
        CMD = DUCC_HOME + '/bin/ducc_service_submit --specification ' + svcfile
        lines = self.popen(CMD)
        for line in lines:
            toks = line.split()
            if ( (len(toks) ==3) and (toks[2] == 'submitted')):
                print 'Service submitted as job', toks[1]
                return toks[1]
        return None

    def register_service(self, svcid, instances, start):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be

        svcfile = self.gen_service(svcid)
        CMD = DUCC_HOME + '/bin/ducc_services --register ' + svcfile + ' --instances ' + instances
        lines = self.popen(CMD)
        for line in lines:
            line = line.strip()
            print 'REGISTER', line
            toks = line.split()
            if ( (toks[0] == 'Service') and (toks[2] == 'succeeded') ):
                print 'Service registered as service', toks[4]
                if ( start ):
                    print 'Starting registered service instance', svcid, 'service id', toks[4]
                    os.system(DUCC_HOME + '/bin/ducc_services --start ' + toks[4])
                return toks[4]
        print 'Cannot register service', svcid, ':', line
        sys.exit(1)

    def start_services(self, svcfile):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be

        svcprops = DuccProperties()
        svcprops.load(svcfile)

        all_services = {}

        submit = svcprops.get('submit')
        self.submitted = {}
        if ( submit != None ):
            submit = submit.strip()
            # make a map with the service id as key and the number of instances as val
            toks = submit.split() 
            for t in toks:
                t = t.strip()
                if ( self.submitted.has_key(t) or  all_services.has_key(t) ):
                    print "Duplicate submitted service", t
                    sys.exit(1)

                self.submitted[t] = None
                all_services[t] = None

        register = svcprops.get('register')
        self.registered = {}
        if ( register != None ):
            register = register.strip()
            # make a map with the service id as key and the number of instances as val
            toks = register.split() 
            for t in toks:
                t = t.strip()
                if ( self.registered.has_key(t)  or  all_services.has_key(t) ):
                    print "Duplicate registered service", t
                    sys.exit(1)
                self.registered[t] = None
                all_services[t] = None

        start = svcprops.get('start')
        self.started = {}
        if ( start != None ):
            start = start.strip()
            # make a map with the service id as key and the number of instances as val
            toks = start.split() 
            for t in toks:
                t = t.strip()
                if ( self.started.has_key(t) ):
                    print "Duplicate started service", t
                    sys.exit(1)
                if ( not self.registered.has_key(t) ):
                    print "Trying to start service", t, "but it is not registered."
                self.started[t] = None

        stand = svcprops.get('standalone')
        self.standalone = {}
        if ( stand != None ):
            stand = stand.strip()
            # make a map with the service id as key and the number of instances as val
            toks = stand.split() 
            for t in toks:
                t = t.strip()
                if ( self.standalone.has_key(t)  or  all_services.has_key(t) ):
                    print "Duplicate standalone service", t
                    sys.exit(1)
                self.standalone[t] = None
                all_services[t] = None

        for (k, v) in self.submitted.items():
            instances = svcprops.get("instances_" + k)
            if ( instances == None ):
                print "Missing instances for submitted job", k
                break
            print "Submitting service", k, "with", instances, "instances"
            for i in range(0, int(instances)):
                id = self.submit_service(k)
                idlist = self.submitted[k]
                if ( idlist == None ):
                    idlist = []
                    self.submitted[k] = idlist
                idlist.append(id)

        for (k, v) in self.registered.items():
            instances = svcprops.get("instances_" + k)
            if ( instances == None ):
                print "Missing instances for registered job", k
            print "Registering service", k, "with", instances, "instances"
            start = self.started.has_key(k)
            service = self.register_service(k, instances, start)
            svcs = self.registered[k]
            if ( svcs == None ):
                svcs = []
                self.registered[k] = svcs
            svcs.append(service)

        for (k, v) in self.standalone.items():
            instances = svcprops.get("instances_" + k)
            if ( instances == None ):
                print "Missing instances for standalone service", k
            print "Starting standalone service", k, "with", instances, "instances"
            for i in range(0, int(instances)):
                service = self.start_uima_as_service(k)
                print 'SERVICE PID', service.pid
                svcs = self.standalone[k]
                if ( svcs == None ):
                    svcs = []
                    self.standalone[k] = svcs
                svcs.append(service)

        os.system(DUCC_HOME + '/bin/ducc_services --query')

        #time.sleep(10)
        #for (k, v) in standalone.items():
        #    print 'Stopping service'
        #    v.stop_service()
        #    print 'Return from service stop'

    def stop_services(self):
        os.environ['USER'] = os.environ['LOGNAME']        # make sure I'm me - after submit may not be
        for (k, v) in self.standalone.items():
            for svc in v:
                print 'Stopping', svc.pid
                svc.send_signal(2)

        for (k, v) in self.submitted.items():
            for id in v:
                print 'Canceling', id
                os.system(DUCC_HOME + '/bin/ducc_service_cancel --id ' + id)

        for (k, v) in self.registered.items():
            for id in v:
                print 'Unregistering', id
                os.system(DUCC_HOME + "/bin/ducc_services --unregister " + id)

class RunDucc(DuccUtil):

    #def start_uima_as_service(self, svcfile):
    #    # hardcode our one sleepae service
    #    print 'SERVICE STARTUP'
    #    args = None
    
    #    DUCC_HOME = os.environ['DUCC_HOME']
    #    HERE = os.getcwd();    
    
    #   jvm_classpath = DUCC_HOME + '/lib/ducc-test.jar'
    
    #    CMD = DUCC_HOME + '/bin/ducc_service_submit'
    #    CMD = CMD + ' --process_classpath ' + jvm_classpath
    #    CMD = CMD + ' --specification ' + self.test_dir + '/services/' + svcfile
    #    self.spawn(CMD)
    
    #   print 'UIMA_AS Service Pid', self.service_pid


    def run_batch(self):
    
        counter = 0
        running = False

        bfile = self.test_dir + '/' + self.batchfile
        if ( not os.path.exists(bfile) ):
            print 'File', bfile, 'does not exist.'
            sys.exit(1)

        f = open(bfile)
        
        for line in f:
            print '----', line.strip()
            if ( line[0] == '#' ):
                continue
    
            if ( line[0:2] == 's ' ):            
    
                #counter = counter + 1
                #if ( counter < 80 ):
                #    continue
                running = True
                
                # tokens: 0  1  2 3
                # tokens: s -c 25 1
                toks = line.split()
                if ( toks[1] == '-c' ):
                    jobfile = toks[3]
                    self.compression = toks[2]
                else:
                    jobfile = toks[1]
                    self.compression = '1'
    
                ducc_process = DuccProcess(self, jobfile)
                ducc_process.submit()

                if ( self.watch ) :
                    self.queue.put(jobfile)         # any old marker will do
                    ducc_process.start()
                else:
                    ducc_process.execute()
                continue
    
            if ( not running ):
                continue
            
            if ( line[0:2] == 'x ' ):
                sys.exit(0)
                continue
    
            if ( line[0:6] == '[sleep' ):
                #toks = string.translate(line, None, '[]').split()
                toks = line.strip().strip('[]').split()
                print toks
                t = toks[1].strip()
    
                # we're not going to try millisecond sleep - it's probably overdesigned 
                # to do  that anyway.
                if ( t[-1:] == 'S' ):
                    delay = int(t.strip('S'))
                elif ( t[-1:] == 'M' ):
                    delay = int(t.strip('M')) * 60
                else:
                    delay = int(t);
                print 'SLEEP', str(delay)
                
                time.sleep(delay)
                continue
       
            # these next aren't supported in "ducc" mode
            if ( line[0:3] == 'qm '):
                continue
            if ( line[0:3] == 'qj '):
                continue
            if ( line[0:3] == 'qc '):
                continue
    
    def usage(self, msg):
        print msg
        print 'Usage:'
        print '   runducc.py [optons]'
        print 'Options:'
        print '   --AE'
        print '       Specifies to run this as a single CR and AE.'
        print ''
        print '  --DD'
        print '       Specifies to run this as CR + CM / AE / CC pipeline.'
        print '' 
        print '  --SE service-startup-config'
        print '       Specifies to run this with the AE as a delegate service.  The required parameter specifies'
        print '       a service startup script.'
        print '' 
        print '   -d, --directory dir'
        print '       This is the directory with the test files and configuration. Required'
        print ''
        print '   -b, --batchfile file'
        print '       This is the batch file describing the submissions. Required.'
        print ''
        print '   -i, --init_time seconds'
        print '       This is the AE initialization minimum time in seconds. Default:', self.init_time
        print ''
        print '   --init_fail_cap number-of-failures.'
        print '       This is the max init failures tolerated before the system starts to cap processes. Default:', self.init_fail_cap
        print ''
        print '   -IB'
        print '       The JP will leak in init() until DUCC (hopefully) kills us'
        print ''
        print '   -PB'
        print '       The JP will leak in process() until DUCC (hopefully) kills us'
        print ''
        print '   -r, --range seconds'
        print '       This is the AE initializion time range over base in seconds. Default:', self.init_range
        print '       Init time is -i value + random[0, -rvalue]'
        print ''
        print '   -m, --memory_override mem-in-GB'
        print '       Use this instead of what is in the props file. Default: None'
        print ''
        print '   -p, --process_timeout sec'
        print '       Process timeout, in seconds. Default:', self.process_timeout
        print ''
        print '   -s  --sourcetree'
        print '       Run application from the DUCC source tree, not from the ducc_build pathing.'
        print ''
        print '   --jd_uima_log log-properties'
        print '       If specified, use the indicated properties file for JD UIMA/UIMA-AS logging. Default:', self.jd_uima_log
        print ''
        print '   --jp_uima_log log-properties'
        print '       If specified, use the indicated properties file for JP UIMA/UIMA-AS logging. Default:', self.jp_uima_log
        print ''
        print '   --use_jar'
        print '       Indicate whether to use the executable jars for submit.  Default:', self.use_jar
        print ''
        print '   --use_apache_pkk true|false'
        print '       Indicate whether to use org.apache.uima.ducc package for submit.  Implies use_jar=false. Default:', self.use_apache_package
        print '' 
        print '   --use_ibm_pkg true|false'
        print '       Indicate whether to use deprecated com.ibm.ducc package for submit.  Implies use_jar=false. Default:', self.use_ibm_package
        print '' 
        print '   --use_jar true|false'
        print '       Indicate whether to use the executable jars for submit.  Default:', self.use_jar
        print ''
        print '   -w, --watch'
        print '       Specifies that we submit in keepalive mode and watch the jobs, creating a dir with outputs. Default:', self.watch
        print '       If specified, we run verification against the results.'
        print 
        print '   -x'
        print '       Error rate (expecting float, 0-100, which is translated into a percentage. Default:', self.error_rate
        print ''
        print '   -y'
        print '       Error probability during initialation, int, 0:100', self.init_error
        print ''
        print 'We run using the compiled classes in the development tree (not jar files)'
        print 'We run with DUCC_HOME set to', os.environ['DUCC_HOME']
        sys.exit(1)
    
    def main(self, argv):
        global DUCC_HOME
        global DUCC_TOP
    
        self.test_dir   = None
        self.batchfile  = None
        self.watch   = False
        self.error_rate = 0.0
        self.init_error = 0
        self.init_fail_cap = '99'
        self.memory_override = None
        self.init_time = 10000
        self.init_range = 1000
        self.process_timeout = str(60*24)  # 24 hour default - nothing in current megas will fail on this
        self.style = 'AE'
        self.service_pid = None
        self.use_sourcetree = False
        self.init_bloat = None
        self.process_bloat = None
        self.service_startup = None
        self.jd_uima_log = None
        self.jp_uima_log = None
        self.use_jar = False
        self.use_apache_package = True
        self.use_ibm_package = False
        self.submit_package = 'org.apache.uima.ducc'

        opts, args  = getopt.getopt(argv, 'b:d:i:r:m:p:swx:y:?h', ['AE', 'DD', 'SE=', 'IB=', 'PB=', 'directory=', 'batchfile=', 'init_time=',
                                                                     'init_fail_cap=', 'range=', 'memory_override=', 'process_timeout=',
                                                                     'sourcetree', 'timeout=', 'watch',
                                                                     'jd_uima_log=', 'jp_uima_log=', 
                                                                     'use_jar', 
                                                                     'use_apache_package', 'use_ibm_package',
                                                                     ])
    
        for ( o, a ) in opts:
            if o in ('-d', '--directory'):
                self.test_dir = a        
            elif o in ('-b', '--batchfile'):
                self.batchfile = a
            elif o in ('-i', '--init_time'):
                self.init_time = int(a) * 1000
            elif o in ('-i', '--init_fail_cap'):
                self.init_fail_cap = a
            elif o in ('-r', '--range'):
                self.init_range = int(a) * 1000
            elif o in ('-m', '--memory_override'):
                self.memory_override = a
            elif o in ('-p', '--process_timeout'):
                self.process_timeout = a
            elif o in ('-s', '--sourcetree'):
                self.use_sourcetree = True
            elif o in ('-w', '--watch' ):
                self.watch = True        
            elif o in ('--jd_uima_log' ):
                self.jd_uima_log = a       
            elif o in ('--jp_uima_log' ):
                self.jp_uima_log = a       
            elif o in ('--use_jar' ):
                self.use_jar = True
            elif o in ('--AE'):
                self.style = 'AE'
            elif o in ('--DD'):
                self.style = 'DD'
            elif o in ('--SE'):
                self.style = 'SE'
                self.service_startup = a
                self.watch = True
            elif o in ('--IB'):
                self.init_bloat = a
            elif o in ('--PB'):
                self.process_bloat = a
            elif o in ('-w', '--watch' ):
                self.watch = True        
            elif ( o == '-x'):
                self.error_rate = float(a)
            elif ( o == '-y'):
                self.init_error = int(a)
            elif ( o == '-?'):
                self.usage(None)
            else:
                print 'badarg', a
                self.usage('bad arg: ' + a)
    
        if ( self.test_dir == None ):
            self.usage("Missing test_dir")
    
        print 'Running with'
        print '    test_dir           :', self.test_dir
        print '    batchfile          :', self.batchfile
        print '    style              :', self.style
        print '    init-time          :', self.init_time / 1000
        print '    init-range         :', self.init_range / 1000
        print '    init-bloat         :', self.init_bloat
        print '    process-bloat      :', self.process_bloat
        print '    watch              :', self.watch           
        print '    error_rate         :', self.error_rate
        print '    init_error         :', self.init_error
        print '    process_timeout    :', self.process_timeout
        print '    memory_override    :', self.memory_override
        print '    jd_uima_log        :', self.jd_uima_log
        print '    jp_uima_log        :', self.jp_uima_log
        print '    use_jar            :', self.use_jar
        print '    use_ibm_package    :', self.use_ibm_package
        print '    use_apache_package :', self.use_apache_package
        print '    DUCC_HOME          :', self.DUCC_HOME

        if ( self.use_ibm_package ):
            self.submit_package = 'com.ibm.ducc'
        elif (self.use_apache_package):
            self.submit_package = 'org.apache.uima.ducc'
        elif (not self.use_jar):
            self.usage('Cannot tell which package to use for submit')

        if ( self.style == 'SE' ):
            if ( self.service_startup == None ):
                usage("Missing service startup file")
            svcfile = self.test_dir + '/' + self.service_startup
            service_starter = ServiceStarter();
            service_starter.start_services(svcfile)

            print 'Pausing a bit'
            time.sleep(15)
            os.system(DUCC_HOME + '/bin/ducc_services --query')
            #service_starter.stop_services()

        if ( self.watch ):
            self.queue = Queue.Queue()

        self.run_batch()
        
        #if ( self.style == 'SE' ):
        #    time.sleep(5)
        #    service_starter.stop_services()
        
        if ( self.watch ):
            self.queue.join()
            print 'All threads returned'
            if ( self.style == 'SE' ):
                service_starter.stop_services()
        

    # --------------------------------------------------------------------------------

# --------------------------------------------------------------------------------
if __name__ == "__main__":
    runducc = RunDucc()
    runducc.set_classpath_for_cli()
    #for c in os.environ['CLASSPATH'].split(':'):
    #    print c
    runducc.main(sys.argv[1:])
