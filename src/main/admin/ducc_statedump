#!/usr/bin/python
# -----------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# -----------------------------------------------------------------------


from ducc_boot import *
set_ducc_home()

import getopt

from ducc_util import DuccUtil
from ducc_util import DuccProperties
from ducc      import Ducc

class DuccStateListener(DuccUtil):

    def run(self):
        CMD = self.java() + ' com.ibm.ducc.test.tools.DuccListener ' + self.host + ' ' + self.port + ' ' + self.topic + \
              ' ' + self.agent + \
              ' ' + self.output + \
              ' ' + self.timeout
        #print CMD
        os.system(CMD)

    def usage(self):
        print "Usage:"
        print "   start_sim [options]"
        print "   If no options are given this help screen is shown."
        print ""
        print "Options:"
        print "   -n This is DUCC's ActiveMQ node, defaults to 'localhost'."
        print ""
        print "   -p This is DUCC's ActiveMQ port, defaults to 61616."
        print ""
        print "   -s This is the state to dump.  One of rm sm or pm metrics inventory."
        print ""
        print "   -t Timeout.  or_statedump will run continuously for this long in seconds.  Defaults to 300 seconds."
        print ""
        print "   -o This is the name of a tempfile where the state is written, defaults to duccstate.out."
        print ""
        print ""
        print "Remember that you will likely have to wait a few seconds for publications to arrive after starting."
        print ""
        print "To get a pretty-printed version of the xstream outpout."
        print "   xmllint --format duccstate.out --output duccstate.out.pretty"

        sys.exit(0)

    def main(self, argv):

        self.host = 'localhost'
        self.port = '61616'
        self.output = 'none'
        self.timeout = 'none'
        self.state = 'or'
        self.agent = "none"

        try:
            opts, args = getopt.getopt(argv, 'n:o:p:s:t:?h')
        except:
            self.invalid('Invalid arguments', ' '.join(argv))
                       
        for ( o, a ) in opts:
            if o in ( '-n' ): 
                self.host = a
            elif o in ( '-o' ):
                self.output = a
            elif o in ( '-p' ):
                port = int(a)        # quick check to see if it converts
                self.port = a
            elif o in ( '-s' ):
                self.state = a
            elif o in ( '-t' ):
                timeout = int(a)
                self.timeout = a
            elif o in ( '-?', '-h' ):
                self.usage()
                
        CLASSPATH = os.environ['CLASSPATH']
        CLASSPATH = CLASSPATH + ':' + self.DUCC_HOME + '/lib/ducc-test.jar'
        os.environ['CLASSPATH'] = CLASSPATH

        if ( self.state == 'or' ):
            self.topic = 'ducc.orchestrator.state'
        elif (self.state == 'rm' ):
            self.topic = 'ducc.rm.state'
        elif (self.state == 'sm' ):
            self.topic = 'ducc.sm.state'
        elif (self.state == 'pm' ):
            self.topic = 'ducc.pm.state'
        elif (self.state.startswith('inventory') ):
            toks = self.state.split('@')
            if ( len(toks) != 2 ):
                print "Invalid state, must be 'inventory@node'"
                sys.exit(1)
            self.topic = 'ducc.node.inventory'
            self.agent = toks[1]
        elif (self.state.startswith('metrics') ):
            toks = self.self.state.split('@')
            print 'toks', toks
            if ( len(toks) != 2 ):
                print "Invalid state, must be 'metrics@node'"
                sys.exit(1)
            self.topic = 'ducc.node.metrics'
            self.agent = toks[1]

        print '-----------------------'
        print 'host', self.host
        print 'port', self.port
        print 'timeout', self.timeout
        print 'output file', self.output
        print 'topic', self.topic
        if ( self.agent != 'none' ):
            print 'agent', self.agent
        print '-----------------------'

        self.run()

if __name__ == "__main__":
    dsl = DuccStateListener()
    dsl.main(sys.argv[1:])
