<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<chapter id="ducc.ducc.ov">
<title>Overview - Distributed UIMA Computing Cluster </title>
  <para>What is DUCC?</para>

<section id="ugr.async.ov.terminology">
    <title>Terminology</title>
    <para>Terms used in describing DUCC capabilities include: </para>
    <variablelist>
      <varlistentry>
        <term> <emphasis role="bold">DUCC</emphasis></term>
        <listitem>
          <para>Distributed UIMA Computing Cluster</para></listitem>
      </varlistentry>
      
      <varlistentry>
        <term> <emphasis role="bold">Job Manager</emphasis></term>
        <listitem>
          <para>What is Job Manager?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">Resource Manager</emphasis></term>
        <listitem>
          <para>What is Resource Manager?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">Process Manager</emphasis></term>
        <listitem>
          <para>What is Process Manager?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">Service Manager</emphasis></term>
        <listitem>
          <para>What is Service Manager?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">Agent</emphasis></term>
        <listitem>
          <para>What is Agent?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">View Manager</emphasis></term>
        <listitem>
          <para>What is View Manager?</para></listitem>
      </varlistentry>

      <varlistentry>
        <term> <emphasis role="bold">Fair Share Algorithm</emphasis></term>
        <listitem>
          <para>What is Share Fair Algorithm?</para></listitem>
      </varlistentry>

	</variablelist>
</section>      

  <section id="ugr.async.ov.as_vs_cpm">
    <title>AS versus CPM</title>
    <para>It is useful to compare and contrast the approaches and capabilities of AS and CPM.</para>
    <figure id="ugr.async.ov.fig.wrapAE">
        <title>AS Primitive Wrapper</title>
        <mediaobject>
          <imageobject role="html">
            <imagedata width="279px" format="PNG"
              fileref="images/ducc-overview/wrapAE.png"></imagedata>
          </imageobject>
          <imageobject role="fo">
            <imagedata width="2.7in" format="PNG"
              fileref="images/ducc-overview/wrapAE.png"></imagedata>
          </imageobject>
          <textobject> <phrase>AS Primitive Wrapper</phrase></textobject></mediaobject></figure>
    <informaltable pgwide="1" colsep="1" frame="all" rowsep="1">
      <tgroup cols="3">
        <colspec colname="c1" colwidth="1*"></colspec>
        <colspec colname="c2" colwidth="2.5*"></colspec>
        <colspec colname="c3" colwidth="2.5*"></colspec>
        <thead>
          <row>
            <entry align="center"></entry>
            <entry align="center">AS</entry>
            <entry align="center">CPM</entry></row></thead>
        <tbody valign="middle">
          <row>
            <entry>Putting components together</entry>
            <entry>
              <para>Provides a consistent, single, unified way to put components together, using
                the base UIMA "aggregate" capability.</para>
            </entry>
            <entry>
              <para> <emphasis role="bold">Two methods of putting components together</emphasis>
                <orderedlist spacing="compact">
                  <listitem>
                    <para>CPE (Collection Processing Engine) descriptor, which has sections specifying a
                      Collection Reader, and a set of CAS Processors</para></listitem>
                  <listitem>
                    <para>Each CAS Processor can, as well, be an aggregate</para></listitem></orderedlist>
                </para>
            </entry></row>
          <row>
            <entry>Kinds of Aggregates</entry>
            <entry>
              <para>An aggregate can be run <emphasis role="bold">asynchronously</emphasis> using the AS
                mechanism, with a queue in front of each delegate, or it can by run <emphasis role="bold">
                synchronously</emphasis>.
              </para>
              <para>
                When run asynchronously, <emphasis>all</emphasis> of the
                delegates will have queues in front of them, and delegates which are AS Primitives can be individually scaled
                out (replicated) as needed.
                Also, multiple CASes can be in-process, at different steps in the pipeline, even without 
                replicating any components.</para>
            </entry>
            <entry>All aggregates are run synchronously. In an aggregate, only one component is running at a
              time; there is only one CAS at a time being processed within the aggregate.</entry></row>
          <row>
            <entry>CAS flow</entry>
            <entry>Any, including custom user-defined sequence using user-provided flow controller.  
              Parallel flows are supported.
            </entry>
            <entry>Fixed linear flow between CAS processors. A single CAS processor can be an aggregate, and within
              the aggregate, can have any flow including custom user-defined sequence using user-provided flow
              controller.</entry></row>
          <row>
            <entry>Threading</entry>
            <entry>Each instance of a component runs in its own thread; the same thread used to call 
              <code>initialize()</code> for a particular instance of a component
              is used when calling <code>process()</code>.</entry>
            <entry>One thread for the collection reader, one for the CAS Consumers, &quot;n&quot; threads for the
              main pipeline, with no guarantees that the same thread for the <code>initialize()</code> call
              is used for the <code>process()</code> call.</entry></row>
          <!--row>
          <entry>Load Balancing</entry>
          <entry>Queue in front of each (set of replicated) component(s); when component is available, it 
          "pulls" requests from the queue</entry>
          <entry>One master queue; entries are "pushed" to components; limited load balancing capability.</entry>
          </row-->
          <row>
            <entry>Delegate deployment</entry>
            <entry>Co-located or remote.</entry>
            <entry>Co-located or remote.</entry></row>
          <!--row>
          <entry>Remoting specifications</entry>
          <entry>
          <formalpara><title><emphasis role="bold">AS:</emphasis></title>
          <para>XML deployment specification is used to specify
          where each delegate is deployed, and protocol to use to connect to it. 
          </para>
          </formalpara>
          <formalpara><title><emphasis role="bold">Service Client Descriptor:</emphasis></title>
          <para>Connect using Vinci or SOAP protocols, specified using 
          service client descriptor</para></formalpara>
          </entry>                
          
          <entry>
          <formalpara><title><emphasis role="bold">CPE:</emphasis></title>
          <para>Limited to Vinci protocol, uses Vinci service client descriptor to connect to 
          a remote Analysis Engine service</para></formalpara>
          
          <formalpara><title><emphasis role="bold">Service Client Descriptor:</emphasis></title>
          <para>Connect using Vinci or SOAP protocols, specified using 
          service client descriptor</para></formalpara>
          </entry>
          <!-  
          <para> Both the CPE and aggregate methods of putting components together
          support remoting. In addition, the CPE supports a limited form of life-cycle
          management, for CAS processors running in the same Host machine, but in
          different processes. The CPE specified remoting is limited to using the Vinci
          communication protocol; an aggregate can use additional protocols,
          such as SOAP.</para>
          
          <para> Aggregates may specify remoting of delegates by having the delegate
          descriptor be a service client descriptor for a remote client. Multiple 
          protocols are supported. The UIMA
          framework handles connecting to the service, but does no life-cycle or error
          recovery. </para>
          </entry> - >
          </row-->
          <row>
            <entry>Life cycle management</entry>
            <entry>
              <para>Scripts to launch services, launch Queue Brokers.</para>
            </entry>
            <entry>
              <para>Scripts to launch services, start Vinci Name Service.</para>
              <para>In addition, CPE &quot;managed&quot; configuration provides for automatic launching of
                UIMA Vinci services in same machine, in different processes. </para>
            </entry></row>
          <row>
            <entry>Error recovery</entry>
            <entry>
              <para>Similar capabilities as the CPM provides for CAS Processors, but at the finer granularity of
                each AS component. The support includes customizable behavior overrides and extensions via user
                code. </para>
            </entry>
            <entry>
              <para>Error detection, thresholding, and recovery options at the granularity of CAS Processors
                (which are CPM components, not delegates of aggregates), with some customizable callback
                notifications</para>
            </entry></row>
          <row>
            <entry>Firewall interactions</entry>
            <entry>Enables deployment of AS services behind a firewall using a public broker. Enables deployment
              of a public broker through single port, or using HTTP &quot;tunneling&quot;.</entry>
            <entry>When using Vinci protocol, requires opening a large number of ports for each deployed service.
              SOAP connected services require one open port.</entry></row>
          <row>
            <entry>Monitoring and Tuning</entry>
            <entry>
              <para>JMX (Java Management Extensions) are enabled for recording many kinds of statistical
                information, and can be used to monitor (and control) the operations of AS
                configured systems.  Statistics are provided and summarized from remote delegates, to aid in tuning
                scaled-out deployments.</para>
            </entry>
            <entry>
              <para>Some JMX information</para>
            </entry></row>
          <row>
            <entry>Collection Reader</entry>
            <entry>Supported for backwards compatibility. New programs should use the CAS Multiplier instead,
              which is more general, or have the application pass in CASes to be processed. The compatibility
              support wraps Collection Readers as Cas Multipliers.  Note: this is supported and implemented in base UIMA.</entry>
            <entry>Is always first element in linear CPE sequence chain</entry></row></tbody></tgroup>
    </informaltable>
 </section>
 
 
   <section id="ugr.async.ov.design_goals">
    <title>Design goals for Asynchronous Scaleout</title>
    <para>The design goals for AS are:
      <orderedlist spacing="compact">
        <listitem>
          <para>Increased flexibility and options for scaleout (versus CPM)</para>
          <orderedlist spacing="compact">
            <listitem>
              <para>scale out parts independently of other parts, to appropriate degree</para></listitem>
            <listitem>
              <para>more options for protocols for remote connections, including some that don't require many
                ports through firewalls</para></listitem>
            <listitem>
              <para>
                support multiple CASes in process simultaneously within an aggregate pipeline</para></listitem>
          </orderedlist></listitem>
        <listitem>
          <para>Build upon widely accepted Apache-licensed open source middleware</para></listitem>
        <listitem>
          <para>Simplification:
            <orderedlist spacing="compact">
              <listitem>
                <para>Standardize on single approach to aggregate components</para></listitem>
              <listitem>
                <para>More uniform Error handling / recovery / monitoring for all AS managed components. </para>
              </listitem>
              <listitem><para>No changes to existing annotator code or descriptors. An additional deployment
                descriptor is used to augment the conventional descriptors.</para></listitem>
            </orderedlist> </para></listitem></orderedlist> </para>
</section>



</chapter>