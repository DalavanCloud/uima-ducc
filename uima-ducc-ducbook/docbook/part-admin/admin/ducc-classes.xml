<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<!-- ************************************ ducc.classes and nodepools ********************************** -->

    <section id="ducc.classes" xreflabel="ducc.classes">
      <title>ducc.classes</title>

      <para>
        <emphasis>The source for this chapter is ducc_ducbook/documents/admin/ducc-classes.xml</emphasis>
      </para>
      
      <para>
        The class configuration file is used by the Resource Manager
        configure the rules used for job scheduling.  See the <link linkend="ducc.rm">Resource Manager</link> 
        chapter for a detailed description of the DUCC schedueler.
      </para>

      <para>        
        The name of class configuration file is specified in <emphasis>ducc.properties</emphasis>.  The
        default name is <emphasis><xref linkend="ducc.classes"/></emphasis> and is specified by the
        property <emphasis> ducc.rm.class.definitions</emphasis> property.
      </para>

      <para>
        This file configures the classes and the associate scheduling rules of each class.  It contains
        properties to declare the following:
        <orderedlist>
          <listitem><para>The names of each class.</para></listitem>
          <listitem><para>The default class to use if none is specified with the job.</para></listitem>
          <listitem><para>The names of all the nodepools.</para></listitem>
          <listitem><para>For each nodepool, the name of the file containing member nodes.</para></listitem>
          <listitem><para>A set of properties for each class, declaring the rules enforced by that class.</para></listitem>
        </orderedlist>
      </para>

      <para>
        The general properties are as follows.  The default values are the defaults in the
        system as initially installed.

        <variablelist>

          <!-- ducc.scheduling.class.set -->
          <varlistentry>
            <term><emphasis role="bold">scheduling.class.set</emphasis></term>
            <listitem>

              <variablelist>
                <varlistentry>
                  <term>Default Value</term>
                  <listitem>
                    <para>
                    background low normal high urgent weekly fixed reserve JobDriver
                    </para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Purpose</term>
                  <listitem>
                    <para>
                    This lists the names of classes defined in the file.
                    </para>
                  </listitem>
                </varlistentry>

              </variablelist>
            </listitem>
          </varlistentry>


          <!-- scheduling.default.name -->
          <varlistentry>
            <term><emphasis role="bold">scheduling.default.name</emphasis></term>
            <listitem>

              <variablelist>
                <varlistentry>
                  <term>Default Value</term>
                  <listitem>
                    <para>
                    normal
                    </para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Purpose</term>
                  <listitem>
                    <para>
                    This is the default class that jobs are assigned to, when not otherwise designated
                    in their submission properties.
                    </para>
                  </listitem>
                </varlistentry>

              </variablelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>

      <para>
        Nodepools are declared with a set of properties to name each nodepool and to name
        a file for each pool that declares membership in the nodepool.

        For each nodepool a property of the form <emphasis>scheduling.nodepool.NODEPOOLNAME</emphasis>
        is declared, where <emphasis>NODEPOOLNAME</emphasis> is one of the declared nodepools. 
      </para>

      <para>
        The property to declare nodepool names is as follows:
        <variablelist>
          <!-- scheduling.nodepool -->
          <varlistentry>
            <term><emphasis role="bold">scheduling.nodepool</emphasis></term>
            <listitem>

              <variablelist>
                <varlistentry>
                  <term>Default Value</term>
                  <listitem>
                    <para>
                    reserve
                    </para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Purpose</term>
                  <listitem>
                    <para>
                    This is the list of nodepool names.  For example:
                    <screen>scheduling.nodepool = res res1 res2</screen>
                    </para>
                  </listitem>
                </varlistentry>

              </variablelist>
            </listitem>
          </varlistentry>
        </variablelist>
      </para>
       
      <para>
         This is an example of a declaration of three nodepools. 
         <programlisting>
scheduling.nodepool      = res res1 res1
scheduling.nodepool.res  = res.nodes
scheduling.nodepool.res1 = res1.nodes
scheduling.nodepool.res2 = res2.nodes
         </programlisting>
      </para>

      <para>
        There is no way to enforce priority assignment to any given nodepool.  It is possible to declare a
        "preference", such that the resources in a given nodepool are considered first when searching
        for nodes.  To configure a preference, use the <emphasis role="bold"> order</emphasis> decorattion on
        a nodepool specificaion.
      </para>

      <para>To declare nodepool order, specify</para>
      <para><emphasis role="bold">scheduling.nodepool.[poolname].order</emphasis>.  The nodepools are 
        sorted numerically according to their order, and pools with lower order are searched before
        pools with higher order.  The global nodepool always order "0" so it is usally searched first.
        For example, the pool configuration below establishes a search order of 
        <orderedlist>
          <listitem><para>global</para></listitem>
          <listitem><para>res2</para></listitem>
          <listitem><para>res</para></listitem>
          <listitem><para>res1</para></listitem>
        </orderedlist>
      </para>
      <para>
         This is an example of a declaration of three nodepools. 
         <programlisting>
scheduling.nodepool            = res res1 res1
scheduling.nodepool.res        = res.nodes
scheduling.nodepool.res.order  = 4
scheduling.nodepool.res1       = res1.nodes
scheduling.nodepool.res1.order = 7
scheduling.nodepool.res2       = res2.nodes
scheduling.nodepool.res2.order = 2
         </programlisting>
      </para>

      <para>
        For each class named in <emphasis>scheduling.class.set</emphasis> a set of properties
        is specified, defining the rules implemented by that class.  Each such property is of the
        form <screen>scheduling.class.CLASSNAME.RULE = VALUE</screen> where
        <variablelist>
          <varlistentry>
            <term><emphasis role="bold">CLASSNAME</emphasis></term>
            <listitem><para>This is the name of the class.</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">RULE</emphasis></term>
            <listitem><para>This is the name of the rule. Rules are described below.</para></listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">VALUE</emphasis></term>
            <listitem><para>This is the value of the rule, as described below.</para></listitem>
          </varlistentry>
        </variablelist>
      </para>

      <para>
        The rules are:
        <variablelist>
          <varlistentry>
            <term><emphasis role="bold">policy</emphasis></term>
            <listitem>
              <para>
              This is the scheduling policy, required, and must be one of:
              <simplelist>
                <member>FAIR_SHARE</member>
                <member>FIXED_SHARE</member>
                <member>RESERVE</member>
              </simplelist>
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">share_weight</emphasis></term>
            <listitem>
              <para>
              This is any integer. This is the weighted-fair-share weight for the class as discussed above. It is only used
              when policy = FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">priority</emphasis></term>
            <listitem>
              <para>
              This is the evaluation priority for the class as discussed above.  This is used for all scheduling policies.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">cap</emphasis></term>
            <listitem>
              <para>
                This is an integer, or an integer with "%" appended to denote a percentage.  It is
                used for all scheduling classes.
              </para>
              <para>
                This is the class cap as discussed above. It may be an absolute value, in
                <emphasis>processes</emphasis> (which may comprise more than one share quanta),
                or it may be specified as a percentage by appending "%" to the end.  When specified
                as a percentage, it caps the shares allocated to this class as that percentage
                of the total shares <emphasis>remaining when the class is evaluated.</emphasis>. It 
                does not consider shares that may have been available and assigned to higher-priority
                classes.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">nodepool</emphasis></term>
            <listitem>
              <para>
              This is the name of the nodepool associated with this class.  It must be one of the names
              declared in the property <emphasis>scheduling.nodepool</emphasis>.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">prediction</emphasis></term>
            <listitem>
              <para>
              Acceptable values are <emphasis>true</emphasis> and <emphasis>false</emphasis>. When set
              to <emphasis>true</emphasis> the scheduler uses prediction when allocating shares.  It is
              only used when policy = FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">prediction.fudge</emphasis></term>
            <listitem>
              <para>
              Acceptable values are any integer, denoting milliseconds. This is the prediction fudge
              as discussed above.  It is only used when policy = FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">expand.by.doubling</emphasis></term>
            <listitem>
              <para>
              Acceptable values are <emphasis>true</emphasis> and <emphasis>false</emphasis>. When set
              to <emphasis>true</emphasis> the scheduler doubles a job's shares up to it's fair-share
              when possible,  as discussed above.  It is
              only used when policy = FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">expand.by.doubling</emphasis></term>
            <listitem>
              <para>
                Acceptable values are <emphasis>true</emphasis> and <emphasis>false</emphasis>. When
                set to <emphasis>true</emphasis> the scheduler doubles a job's shares up to it's
                fair-share when possible, as discussed above.  When set
                in <emphasis>ducc.classes</emphasis> it overrides the defaults
                from <emphasis>ducc.properties</emphasis>.  It is only used when policy =
                FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">initialization.cap</emphasis></term>
            <listitem>
              <para>
                Acceptable values are any integer. This is the maximum number of processes
                assigned to a job until the first process has successfully completed initialization.  To disable
                the cap, set it to zero <emphasis>0</emphasis>.  It is only used when policy =
                FAIR_SHARE.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">max_processes</emphasis></term>
            <listitem>
              <para>
                Acceptable values are any integer. This is the maximum number of processes
                assigned to a FIXED_SHARE request.  If more are requested, the request is
                canceled. It is only used when policy =
                FIXED_SHARE.  If set to 0 or not specified, there is no enforced maximum.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">max_machines</emphasis></term>
            <listitem>
              <para>
                Acceptable values are any integer. This is the maximum number of machines
                assigned to a RESERVE request.  If more are requested, the request is
                canceled. It is only used when policy =
                RESERVE.  If set to 0 or not specified, there is no enforced maximum.
              </para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><emphasis role="bold">enforce.memory</emphasis></term>
            <listitem>
              <para>
                Acceptable values are <emphasis>true</emphasis> and <emphasis>false</emphasis>. When
                set to <emphasis>true</emphasis> the scheduler requires that any machine selected
                for a reservation matches the reservation's declared memory.  The declared memory is
                converted to a number of quantum shares.  Only machines whose memory, when converted
                to share quanta are selected.  When set to <emphasis>false</emphasis>, any machine
                in the configured nodepool is selected.  It is only used when policy =
                RESERVE.
              </para>
            </listitem>
          </varlistentry>

        </variablelist>
      </para>
    </section>





